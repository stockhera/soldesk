{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "79553883-9641-4e41-b2b8-92436bffef72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "9\n",
      "6\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "#파이썬은 행단위 언어\n",
    "print (3+3)\n",
    "print (3*3)\n",
    "\n",
    "#옆으로 길게 작성하려면, ;(semi-colon)을 사용하면됨\n",
    "print (3+3); print (3*3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b47efd07-14db-4317-810f-e1fa2ad4b852",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "#a라는 영역에 10이라고 넣겠다\n",
    "a = 10\n",
    "'''\n",
    "#파이썬 자료형\n",
    "#리터널 : 숫자 (자연수) : 정수 : 10, 20, 30\n",
    "#리터널 : 숫자 : 실수 : 10.1, 20.2\n",
    "#리터널 : 문자 (자연어) : 한국어, 영어, 프랑스어\n",
    "a = 10 # a는 변수: 값을 저장하기 위한 문자 : 등호에서 왼쪽에 있는 문자\n",
    "'''\n",
    "print(a)\n",
    "print(10+a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8b48dcfc-ae74-47b4-ae9b-ef0b322e8e3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "print(a)\n",
    "a = 20\n",
    "print(a)\n",
    "#변수는 오로지 하나의 값만 저장"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "23fea3ed-a9b3-4ab5-9ae0-5cc83d48e889",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "j = 10 #초기값\n",
    "print(j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c38a27ba-82c6-4adf-b715-7f0d08a6ea1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "i = 10 #i라는 변수는 정수리터럴 값을 저장\n",
    "i = 10.1 #i라는 변수는 실수리터럴 값을 저장"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4fb6b393-3af1-4524-bc54-dadba3996488",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n",
      "200\n",
      "-10\n",
      "0.5\n",
      "1\n",
      "3\n",
      "3\n",
      "1000\n",
      "10\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "#자연수 리터널이 사용하는 연산자 : 사칙연산, 몫, 나누기, 제곱승\n",
    "#리터널 값을 직접 넣는 경우는 거의 없고, 변수에 값을 넣어서 사용하기\n",
    "i = 10\n",
    "j = 20\n",
    "print(i+j)\n",
    "print(i*j)\n",
    "print(i-j)\n",
    "print(i/j)\n",
    "#나머지\n",
    "print(10%3)\n",
    "#몫\n",
    "print(10//3)\n",
    "k=3\n",
    "print(i // k)\n",
    "#제곱승\n",
    "print (10**3)\n",
    "\n",
    "이숭무 = 10\n",
    "print(이숭무)\n",
    "\n",
    "이숭무 = j #j가 가진 값을 이숭무라는 변수에 대입\n",
    "print(이숭무)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b8a06bad-38d9-42c4-8e86-cd434b96ed19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "20\n",
      "이숭무\n",
      "<class 'int'>\n",
      "<class 'str'>\n",
      "10\n",
      "10.1\n",
      "이숭무\n"
     ]
    }
   ],
   "source": [
    "#자연어 리터널 : 문자열 : 리터널과 변수를 구분하기 위해 \"\",'' (싱글/더블 quotation)를 사용\n",
    "str1 = 이숭무\n",
    "print(str1)\n",
    "\n",
    "strl = \"이숭무\"\n",
    "print(str1)\n",
    "\n",
    "str1= '이숭무'\n",
    "print(str1)\n",
    "\n",
    "i = 10 #숫자 리터널\n",
    "str1 =\"10\" #문자 리터널\n",
    " #print(10+str1):문자와 숫자는 계산할 수 없으므로 error 발생\n",
    "print(type(i))\n",
    "print(type(str1))\n",
    "\n",
    "i = 10\n",
    "print(i)\n",
    "i = 10.1\n",
    "print(i)\n",
    "i = \"이숭무\"\n",
    "print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "42c8eadc-9b9a-4190-bd08-6f3cec850bcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n"
     ]
    }
   ],
   "source": [
    "#변수명은 문자이어야 한다\n",
    "#2 = 10 (구별해줄 수 있는 방법X)\n",
    "#1이 = 10 (앞이 숫자이기 때문에 인식X)\n",
    "#a = \"b\" (사용가능)\n",
    "이1 =100\n",
    "print(이1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d2067222-4519-4689-9cc9-34a8c244d79d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "pythonis fun\n",
      "python3\n",
      "python is fun\n",
      "pythonpythonpython\n",
      "==========================================================================================\n",
      "파이썬은 너무 재밌어요\n",
      "==========================================================================================\n"
     ]
    }
   ],
   "source": [
    "#숫자리터널 덧셈 연산\n",
    "print (10+10) \n",
    "\n",
    "#문자리터널 연산자 (2개): + (연결연산자) , * (반복연산자)\n",
    "head = \"python\"\n",
    "tail = \"is fun\" #python과 is가 붙어서 작성되게됨\n",
    "print(head+tail) #문자열에서 덧셈기호 : 연결연산자\n",
    "print(head + str(3)) #숫자 3을 문자로 바꿔주는 함수 str\n",
    "print(head+\" \"+tail) #\"(space bar)\" : 공백 문자 / 이항연산자 : 각 항은 문자이어야 함\n",
    "print(head*3) #반복연산자: head를 숫자만큼 반복해서 출력 //이항연산자 : 1항은 문자, 2항은 숫자\n",
    "print(\"===\" * 30) #===를 30번 반복해라\n",
    "print(\"파이썬은 너무 재밌어요\")\n",
    "print(\"===\" * 30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "7a957b4c-22d6-4c10-bc31-e8a6fa3af618",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life is too short, You need python\n",
      "Life is too short,\n",
      " You need python\n",
      "Life is too short,\t You need python\n",
      "Life is too short,\n",
      " You need python\n",
      "Life's too short,\n",
      " \"You need\" python\n",
      "Life's too short,\n",
      " \"You need\" python\n",
      "Life's too short,\n",
      " You need python\n"
     ]
    }
   ],
   "source": [
    "#일반적인 문장 출력하기 (큰 따옴표 사용)\n",
    "str1= \"Life is too short, You need python\"\n",
    "print(str1)\n",
    "# \\n :문자열 안에서 줄을 바꿀 때 사용\n",
    "str1 = \"Life is too short,\\n You need python\"\n",
    "print(str1)\n",
    "# \\t : 문자열 사이에 탭 간격을 줄 때 사용\n",
    "str1 = \"Life is too short,\\t You need python\"\n",
    "print(str1)\n",
    "#일반적인 문장 출력하기2 (작은 따옴표 사용)\n",
    "str1 = 'Life is too short,\\n You need python' #큰따옴표를 사용한 것과 작은따옴표를 사용한 것의 출력과 동일함\n",
    "print(str1)\n",
    "#Life 축약 표현 그대로 유지 + 줄바꿈 + you need 강조\n",
    "str1= 'Life\\'s too short,\\n \\\"You need\\\" python' #you need 부분에 역슬래쉬 2개 큰 따옴표는 안밖으로 배치??\n",
    "print(str1)\n",
    "##Life 축약 표현 그대로 유지 + 줄바꿈 + you need 강조 (위에 것과 다른 점은?)\n",
    "str1 = 'Life\\'s too short,\\n \"You need\" python'\n",
    "print(str1)\n",
    "str1 = 'Life\\'s too short,\\n You need python' #문장 안에 어퍼스트로피가 들어가게 되면 error 발생\n",
    "print(str1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d5686f0d-e063-4e01-ac7f-93ddb7db6e99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life is too short,\n",
      "\"You need\" python\n",
      "Life's too short,\n",
      "You need python\n"
     ]
    }
   ],
   "source": [
    "#single quotation 3개 : 줄바꿈\n",
    "str1 = '''Life is too short,\n",
    "\"You need\" python'''\n",
    "print(str1)\n",
    "#문장 안에 's가 들어가기 때문에 double quotation 3개: 줄바꿈\n",
    "str1 = \"\"\"Life's too short,\n",
    "You need python\"\"\"\n",
    "print(str1)\n",
    "#문자열을 표기하는 방법: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a492b4e3-5d5e-45cb-bc0a-f02fda949d71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life is too short, You need python\n",
      "34\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "str1= \"Life is too short, You need python\"\n",
    "print(str1)\n",
    "#문자열의 갯수 출력\n",
    "print(len(str1))\n",
    "str1 = \"권수민\"\n",
    "print(len(str1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fefab20f-9c36-4b3e-89c1-12f4c82d789f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life is too short, You need python\n",
      "t\n",
      "Y\n",
      "n\n",
      "n\n",
      "34\n",
      "n\n",
      "t\n"
     ]
    }
   ],
   "source": [
    "#문자열 indexing : index란 문자가 가지고 있는 위치를 나타내는 고유의 번호\n",
    "#문자의 시작은 0번 부터 시작\n",
    "str1= \"Life is too short, You need python\"\n",
    "#                1         2         3            \n",
    "#      0123456789012345678901234567890123 (실제로는 이렇게 계산하지 않음)\n",
    "#마지막 index는 크기보다 1작다\n",
    "print(str1)\n",
    "print(str1[8])\n",
    "print(str1[19])\n",
    "print(str1[33])\n",
    "print(str1[34-1])\n",
    "print(len(str1)) #34 (이렇게 프로그래밍 하는 경우는 없음)\n",
    "print(str1[len(str1)-1]) #맨 마지막 문자를 갖고 오고 싶을때\n",
    "\n",
    "str1= \"Life is too short\"\n",
    "print(\"Life is too short\"[len(str1)-1]) #str1대신에 문자열을 직접 넣을 수도 있음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "7f0c7a17-74e6-46d8-8821-5b2ccbb96c8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "s\n",
      "L\n",
      "L\n",
      "t\n",
      "L\n",
      "t\n",
      "17\n",
      "t\n",
      "tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\n",
      "1700\n"
     ]
    }
   ],
   "source": [
    "str1= \"Life is too short\"\n",
    "#                1\n",
    "#      01234567890123456\n",
    "#             1      \n",
    "#     -76543210987654321\n",
    "print(str1[12]) #문자리터널\n",
    "print(str1[0])\n",
    "print(str1[-17])\n",
    "print(str1[-1])\n",
    "print(str1[-len(str1)])\n",
    "print(str1[16])\n",
    "print(len(str1)) #정수리터널\n",
    "print(str1[len(str1)-1])\n",
    "print(str1[len(str1)-1]*100)\n",
    "print(len(str1)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "992d1813-febf-41eb-b2a4-5bddd4a47b13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life\n",
      "Life\n"
     ]
    }
   ],
   "source": [
    "str1= \"Life is too short\"\n",
    "#                1\n",
    "#      01234567890123456\n",
    "print(\"Life\")\n",
    "print(str1[0]+str1[1]+str1[2]+str1[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "3f94822a-6371-4216-ba19-4cc34fefbe69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life\n",
      "short\n",
      "short\n",
      "Life\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "숫자를 입력하세요. 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "e is too s\n"
     ]
    }
   ],
   "source": [
    "#slicing : 문자열 자르기\n",
    "str1= \"Life is too short\"\n",
    "#                1\n",
    "#      01234567890123456\n",
    "#life 출력하기\n",
    "print(str1[0:4]) # \":\" 는 and 를 의미 (어디부터 어디까지) / start는 0, end(출력x)는 4 까지 작성하여야 3까지 데이터 출력  \n",
    "#short 출력하기\n",
    "print(str1[12:17])\n",
    "\n",
    "#숫자를 모두 세기 어려움 \n",
    "print(str1[12:12+5]) #12번부터 시작하고 5개 글자 갖고오기\n",
    "print(str1[0:0+4]) #0번부터 시작하고 4개 글자 갖고오기\n",
    "\n",
    "#word의 갯수를 지정\n",
    "word=4\n",
    "print(strl[3:3+word])\n",
    "\n",
    "wordCount = int(input(\"숫자를 입력하세요.\")) #input이 문자열이므로 int로 숫자열로 전환\n",
    "print(10+ wordCount) # ***확인하기\n",
    "print(str1[3:3 + wordCount])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "3f002062-2de6-4356-b9a2-dfe251e60d17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life\n",
      "Life\n",
      "Life\n",
      "short\n",
      "short\n",
      "short\n",
      "Life is too short\n",
      "Life\n"
     ]
    }
   ],
   "source": [
    "str1= \"Life is too short\"\n",
    "#                1\n",
    "#      01234567890123456\n",
    "#             1 \n",
    "#     -76543210987654321\n",
    "print(\"Life\")\n",
    "print(str1[0:0+4])\n",
    "print(str1[:4]) #0에서 시작할 경우 생략 가능함\n",
    "print(str1[12:17])\n",
    "print(str1[12:len(str1)]) #len(str1) = 17\n",
    "print(str1[12:]) #맨 마지막글자로 끝날 걍우 생략 가능함\n",
    "print(str1[:])\n",
    "print(str1[:-13])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "14547045-35d3-4d5e-93e7-060e154e0f68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2001년\n",
      "03월\n",
      "31일\n",
      "이름은Rainy입니다\n"
     ]
    }
   ],
   "source": [
    "#날짜(년,월,일)과 날씨를 분리하여 출력\n",
    "\n",
    "a = \"20010331Rainy\"\n",
    "#    0123456789012\n",
    "\n",
    "#print (     +\"년\")\n",
    "print(a[0:4]+\"년\")\n",
    "\n",
    "#print (     +\"월\")\n",
    "print(a[4:6]+\"월\") #정답 4:4+3\n",
    "\n",
    "#print (     +\"일\")\n",
    "print(a[6:8]+\"일\") #정답 6:6+2\n",
    "\n",
    "#print (\"날씨는 \" + + \"입니다\")\n",
    "print(\"이름은\" + a[8:13] +\"입니다\") #정답 a[8:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "76af8337-9f9f-44e4-9d48-72bceeedb951",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life\n",
      "Lf\n",
      "Lf stosot\n",
      "trohs oot si efiL\n",
      "f stos\n",
      "\n",
      "hs oot si ef\n",
      "hs oot si efiL\n",
      "h o iei\n",
      "ho  i\n",
      "fit \n"
     ]
    }
   ],
   "source": [
    "str1= \"Life is too short\"\n",
    "#                1\n",
    "#      01234567890123456\n",
    "print(str1[0:4])\n",
    "print(str1[0:4:2]) #0부터 4까지 가져오는데 그 중에서 하나 건너 출력\n",
    "print(str1[::2]) #데이터 전체 가져오는데 그 중에서 하나 건너 출력\n",
    "\n",
    "#reverse 거꾸로 출력하기\n",
    "print(str1[::-1]) #데이터 전체 가져오는데 -1부터 출력해라\n",
    "print(str1[2:14:2]) #데이터 2번부터 13번까지 하나 건너서 출력해라\n",
    "print(str1[13:1]) #데이터 -1이 없으면 13부터 오른쪽으로 증가 = 아무것도 찍히지 않음\n",
    "print(str1[13:1:-1]) #데이터 -1을 넣어줌으로써 13번부터 반대로 데이터 수집\n",
    "print(str1[13::-1]) #데이터 13부터 0까지 반대로 데이터 수집\n",
    "print(str1[13::-2]) #데이터 13번부터 0번까지 반대 순서로 수집하는데, 하나씩 걸러서 수집\n",
    "print(str1[13::-3]) #데이터 13번부터 0번꺼지 반대 순서로 수집하는데, 두개씩 걸러서 수집 \n",
    "print(str1[2:14:3]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "e9cf94c8-577d-493e-87d1-3283fca3d7e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i\n",
      "python\n"
     ]
    }
   ],
   "source": [
    "#Pithon 문자열을 Python으로 바꾸려면?\n",
    "str1='pithon'\n",
    "print(str1[1])\n",
    "#str1[1] = 'y'\n",
    "print(str1[0]+\"y\"+str1[2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "8f07d03c-b9eb-4562-ab32-ed04612f4507",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "숫자를 입력해주세요. 20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "나의 이름은 권수민이고 나이는 20살 입니다\n",
      "나의 이름은 권수민이고 나이는 20살 입니다.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "이름을 입력하세요. 권수민\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "나의 이름은 권수민이고, 나이는 20살 입니다.\n",
      "나의 이름은 권수민이고, 나이는 20살 입니다.\n"
     ]
    }
   ],
   "source": [
    "## 포맷문자열 포맷팅 : %d :정수, %s: 문자열, %f:실수, %c: 문자1개\n",
    "'나의 이름은 권수민이고 나이는 20살입니다.'\n",
    "\n",
    "age = int(input(\"숫자를 입력해주세요.\"))\n",
    "print('나의 이름은 권수민이고 나이는 '+str(age)+'살 입니다') #str 숫자를 문자로 바꿔주는 함수\n",
    "print('나의 이름은 권수민이고 나이는 %d살 입니다.'% age)\n",
    "name = input(\"이름을 입력하세요.\")\n",
    "print('나의 이름은 %s이고, 나이는 %d살 입니다.' %(name, age))\n",
    "str2 = '나의 이름은 %s이고, 나이는 %d살 입니다.' %(name, age)\n",
    "print(str2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "b156c362-4a37-4398-896a-7610a74a59ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이상범의 계좌번호는 987654321이고 잔액은 100000입니다.\n"
     ]
    }
   ],
   "source": [
    "'이숭무의 계좌번호는 123456789이고 잔액은 999999999원입니다.'\n",
    "\n",
    "name='이상범'\n",
    "account='987654321'\n",
    "money= 100000\n",
    "result = '%s의 계좌번호는 %s이고 잔액은 %d입니다.' %(name, account, money)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "3ec62853-73a6-40f9-9f27-f9a8db6f9485",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이상범의 나이는 20살이고, 키는 178.550000입니다\n",
      "이상범의 나이는 20살이고, 키는 178.55입니다\n",
      "이상범의 나이는 20살이고, 키는 178.6입니다\n",
      "이상범의 나이는 20살이고, 키는      178.6입니다\n",
      "이상범의 나이는 20살이고, 키는 178.6입니다\n",
      "이상범의 나이는 20살이고, 키는 178.6입니다\n"
     ]
    }
   ],
   "source": [
    "\"이숭무의 나이는 20살이고, 키는 175.3입니다.\"\n",
    "name = '이상범'\n",
    "age = 20\n",
    "height = 178.55\n",
    "result = \"%s의 나이는 %d살이고, 키는 %f입니다\" % (name, age, height)\n",
    "print(result)\n",
    "\n",
    "# 99.99999 : 정밀도 (소수점 자리)_기본 소수점 여섯자리 출력\n",
    "result = \"%s의 나이는 %d살이고, 키는 %6.2f입니다\" % (name, age, height) #소수점 6자리 중에 2자리만 출력\n",
    "print(result)\n",
    "result = \"%s의 나이는 %d살이고, 키는 %5.1f입니다\" % (name, age, height)\n",
    "print(result)\n",
    "result = \"%s의 나이는 %d살이고, 키는 %10.1f입니다\" % (name, age, height)\n",
    "print(result)\n",
    "result = \"%s의 나이는 %d살이고, 키는 %1.1f입니다\" % (name, age, height) #출력공간이 부족하게 되면, 그대로 출력하게 된다.\n",
    "print(result)\n",
    "result = \"%s의 나이는 %d살이고, 키는 %.1f입니다\" % (name, age, height) #소수점 이하 한 자리만 출력한다\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "6da14338-df79-467b-9358-14f01940bc5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       이상범의 나이는         20살이고, 키는     178.55입니다\n",
      "이상범       의 나이는 20        살이고, 키는 178.55    입니다\n"
     ]
    }
   ],
   "source": [
    "# 정렬: -는 왼쪽정렬, +는 오른쪽 정렬\n",
    "result = \"%10s의 나이는 %10d살이고, 키는 %10.2f입니다\" % (name, age, height) #10개의 공간을 넣어서 출력\n",
    "print(result)\n",
    "\n",
    "#왼쪽정렬 시키기\n",
    "result = \"%-10s의 나이는 %-10d살이고, 키는 %-10.2f입니다\" % (name, age, height) #10개의 공간을 넣어서 출력\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "6651930c-2462-446d-a9e9-a36299b6c453",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이상범의 나이는 20살이고, 키는 178.550000입니다\n",
      "%s의 나이는 %d살이고, 키는 %f입니다\n",
      "이상범의 나이는 20살이고, 키는 178.55입니다.\n",
      "이숭무의 나이는 20살이고, 키는 178.55입니다.\n",
      "이상범의 나이는 20살이고, 키는 172.25입니다.\n"
     ]
    }
   ],
   "source": [
    "#format 함수를 사용한 포맷팅\n",
    "#변수: a, i, j, str1\n",
    "#함수: print(), int(), str()\n",
    "print (\"%s의 나이는 %d살이고, 키는 %f입니다\" % (name, age, height))\n",
    "print(\"%s의 나이는 %d살이고, 키는 %f입니다\".format(age, name, height))\n",
    "#                                                   0     1      2\n",
    "print('{1}의 나이는 {0}살이고, 키는 {2}입니다.'.format(age, name, height))\n",
    "\n",
    "print('{1}의 나이는 {0}살이고, 키는 {2}입니다.'.format(age, \"이숭무\", height))\n",
    "\n",
    "print('{1}의 나이는 {0}살이고, 키는 {2}입니다.'.format(age, name, 172.25))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "01550052-91c7-4338-923a-f221f3397f1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이상범의 나이는 20살이고, 키는 172.25입니다.\n",
      "이상범의 나이는 20살이고, 키는 172.25입니다.\n",
      "이상범의 나이는 20살이고, 키는 172.25입니다.\n",
      "이상범의 나이는 20살이고, 키는 172.25입니다.\n"
     ]
    }
   ],
   "source": [
    "#format 함수에 이름으로 넣기\n",
    "print('{1}의 나이는 {0}살이고, 키는 {2}입니다.'.format(age, name, 172.25))\n",
    "print('{1}의 나이는 {0}살이고, 키는 {f}입니다.'.format(age, name, f=172.25))\n",
    "print('{n}의 나이는 {0}살이고, 키는 {f}입니다.'.format(age, n=name, f=172.25))\n",
    "#print('{n}의 나이는 {0}살이고, 키는 {f}입니다.'.format(age, n=name, 172.25))\n",
    "#index가 사라지는 현상                                   0    n         ?\n",
    "#이름은 뒤에서부터 순차적으로 붙여준다\n",
    "print('{n}의 나이는 {a}살이고, 키는 {f}입니다.'.format(a=age, n=name, f=172.25))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "id": "1e9a59d3-4321-4e5b-b569-7e6df95a30c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이장범의 나이는 20살이고, 키는 173.600000입니다\n",
      "이장범의 나이는 20살이고, 키는 172.25입니다.\n",
      "이장범       의 나이는         20살이고, 키는     172.25입니다.\n",
      "       이장범의 나이는 20        살이고, 키는 172.25    입니다.\n",
      "   이장범    의 나이는     20    살이고, 키는   172.25  입니다.\n",
      "---이장범----의 나이는 !!!!20!!!!살이고, 키는 **172.25**입니다\n",
      "{이상범}의 나이는 !!!!20!!!!살이고 키는***이장범****입니다\n",
      "{2}의 나이는 !!!!20!!!!살이고 키는 **175.25**입니다\n"
     ]
    }
   ],
   "source": [
    "#format함수를 이용한 정렬 / 왼쪽정렬 : < (작다) 오른쪽정렬 : > (크다) 가운데정렬 : ^\n",
    "print(\"%s의 나이는 %d살이고, 키는 %f입니다\" % (name, age, height))\n",
    "print('{1}의 나이는 {0}살이고, 키는 {2}입니다.'.format(age, name, 172.25))\n",
    "print('{1:10}의 나이는 {0:10}살이고, 키는 {2:10}입니다.'.format(age, name, 172.25)) #문자는 왼쪽, 숫자는 오른쪽 정렬\n",
    "print('{1:>10}의 나이는 {0:<10}살이고, 키는 {2:<10}입니다.'.format(age, name, 172.25)) #꺽쇠괄호로 정렬하기 \n",
    "print('{1:^10}의 나이는 {0:^10}살이고, 키는 {2:^10}입니다.'.format(age, name, 172.25)) #가운데정렬\n",
    "print('{1:-^10}의 나이는 {0:!^10}살이고, 키는 {2:*^10}입니다'.format(age, name, 172.25)) #가운데정렬 시 빈 공간 특정문자로 채우기\n",
    "#print('{이상범}의 나이는 {0:!^10}살이고 키는 {1:*^10}입니다'.format(age, name, 172.25))\n",
    "print('{{이상범}}의 나이는 {0:!^10}살이고 키는{1:*^10}입니다'.format(age, name, 172.25))\n",
    "print('{{2}}의 나이는 {0:!^10}살이고 키는 {1:*^10}입니다'.format(age,175.25,name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "bf91b41c-8536-4116-b658-5e7f3e18e958",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이장범은 나이가 20이고 키는 173.600000입니다.\n",
      "이장범은 나이가 20이고 키는 173.6입니다.\n",
      "이장범은 나이가 20이고 키는 173.600입니다.\n",
      "이장범은 나이가 20이고 키는 173.6입니다.\n",
      "이장범은 나이가 20이고 키는 173.600입니다.\n"
     ]
    }
   ],
   "source": [
    "#f 문자열 포매팅\n",
    "\n",
    "name=\"이장범\"\n",
    "age = 20\n",
    "height = 173.6\n",
    "'이장범은 나이가 20이고 키는 173.6입니다.'\n",
    "print('%s은 나이가 %d이고 키는 %f입니다.' % (name, age, height)) #포맷문자열 포매팅\n",
    "print('{0}은 나이가 {1}이고 키는 {2}입니다.'.format(name, age, height))\n",
    "print('{0}은 나이가 {1}이고 키는 {2:.3f}입니다.'.format(name, age, height))\n",
    "print(f'{name}은 나이가 {age}이고 키는 {height}입니다.')\n",
    "result = f'{name}은 나이가 {age}이고 키는 {height}입니다.'\n",
    "result = f'{name}은 나이가 {age}이고 키는 {height:.3f}입니다.'\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "116c7687-3677-421c-9ed7-fbed43f4004c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17\n",
      "17\n",
      "2\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "#문자열 가공\n",
    "str1 = \"Life is too short\" #indexing하고 slicing 배움\n",
    "print(len(str1))\n",
    "print(len(\"Life is too short\"))\n",
    "\n",
    "#특정문자의 개수 세기\n",
    "print(str1.count('s'))\n",
    "print(\"Life is too short\".count('s'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "9b34d60a-5a8f-40bd-a982-f275b6971a5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life is too short\n",
      "8\n",
      "too\n",
      "too\n",
      "8\n",
      "too\n",
      "too\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "print(str1) #str1에 대한 데이터를 모른다고 가정\n",
    "\n",
    "#\"too\"라는 글자를 출력하기\n",
    "idx = str1.index(\"too\")\n",
    "print(idx)\n",
    "print(str1[idx:idx+3])\n",
    "print(str1[idx:idx+len(\"too\")])\n",
    "\n",
    "idx = str1.index(\"too\")\n",
    "str2 = \"too\"\n",
    "print(idx)\n",
    "print(str1[idx:idx+len(str2)])\n",
    "print(str1[str1.index(\"too\"):str1.index(\"too\")+len(str2)]) #너무 복잡한 구조 바로 위의 것을 주로 사용\n",
    "idx=str1.index(\"t\")\n",
    "print(idx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "3c696139-413b-4efa-9292-7719c73e5ca5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ife is too\n",
      "Life is too short\n",
      "5\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "##str1에서 첫번째 i가 있는 문자부터 10글자 출략\n",
    "idx = str1.index(\"i\")\n",
    "result = str1[idx:idx+10]\n",
    "print(result)\n",
    "\n",
    "#두번째 i부터 10글자\n",
    "print(str1)\n",
    "idx = str1.index(\"i\",2); \n",
    "print(idx)\n",
    "#위에서 2라는 순번을 어떻게 찾을까?\n",
    "#두번째 i가 어디있는지 모르니까, 첫번째 i가 있는 위치를 먼저 찾고, 거기에 다음 위치서부터 i를 찾는다\n",
    "idx = str1.index(\"i\",str1.index(\"i\")+1)\n",
    "print(idx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "18b8f017-4c1e-469f-a644-213c407654cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16\n",
      "2\n",
      "8\n",
      "16\n",
      "16\n"
     ]
    }
   ],
   "source": [
    "str1 = \"Lite is too short, You need Python\"\n",
    "#3번째 t에서 인덱스 갖고 오기\n",
    "idx = str1.index('t',9) #우리는 실제로 리터널이 몇번째인지 모름\n",
    "print(idx)\n",
    "\n",
    "idx = str1.index('t') #첫번째 t를 찾아라\n",
    "print(idx)\n",
    "idx1 = str1.index('t',idx+1) #첫번째 t다음 글자부터 t를 찾아라\n",
    "print(idx1)\n",
    "idx2 = str1.index('t',idx1+1) #두번째 t다음 글자부터 t를 찾아라\n",
    "print(idx2)\n",
    "\n",
    "#한 줄로 데이터 짜기\n",
    "print(str1.index('t',str1.index('t',str1.index('t')+1)+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "7b67f918-fb06-4d3f-8e3b-1daa2ccf7044",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n",
      "tho\n"
     ]
    }
   ],
   "source": [
    "#마지막에 있는 't' 찾기\n",
    "#오른쪽에서부터 찾으면 됨\n",
    "idx = str1.rindex('t') #rindex: 맨 오른쪽에서 부터 찾기\n",
    "print(idx)\n",
    "\n",
    "#마지막에 있는 't'에서 3글자\n",
    "print(str1[idx:idx+3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "78da9a05-582a-471e-88ae-7ff526c7be9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lite is too short, You need Python\n",
      "1\n",
      "5\n",
      "-1\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#인덱스보다는 find함수를 사용할 것!!\n",
    "#find : index처럼 문자열의 index를 가져온다\n",
    "print(str1)\n",
    "idx = str1.find(\"i\")\n",
    "print(idx)\n",
    "idx = str1.rfind(\"i\") #오른쪽에서부터 찾는다\n",
    "print(idx)\n",
    "#print(str1.index('zoo')) #인덱스에 없는 값이 나오면 error가 발생해서 find함수 사용\n",
    "print(str1.find('zoo')) #find함수는 인덱스에 없는 값을 1로 표시\n",
    "'''\n",
    "if str1.find('zoo') == =1:\n",
    "    print(\"없는 문자열입니다.\")\n",
    "else:\n",
    "    print(str1)\n",
    "'''\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "12c04b3c-032f-49a8-a1d9-ee2ea6e07084",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lite is too short, You need Python\n",
      "LITE IS TOO SHORT, YOU NEED PYTHON\n",
      "lite is too short, you need python\n"
     ]
    }
   ],
   "source": [
    "print(str1)\n",
    "#위와 같이 데이터가 있을 때, 문자열을 모두 대문자로 출력\n",
    "print(str1.upper())\n",
    "#소문자\n",
    "print(str1.lower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "id": "6dd22609-7c88-402e-af94-9d6a5f37934a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         student       \n",
      "student\n",
      "student       \n",
      "         student\n",
      "student\n",
      "abstudent\n",
      "studentab\n",
      "stu     dent\n"
     ]
    }
   ],
   "source": [
    "str1 = \"         student       \"\n",
    "print(str1)\n",
    "print(str1.strip())\n",
    "print(str1.lstrip())\n",
    "print(str1.rstrip())\n",
    "\n",
    "str1 = \"abstudentab\" #특정문자지우기\n",
    "print(str1.strip(\"ab\")) #ab를 지워라\n",
    "print(str1.rstrip(\"ab\")) #오른쪽 ab를 지워라\n",
    "print(str1.lstrip(\"ab\")) #왼쪽 ab를 지워라\n",
    "\n",
    "#가운데 빈공간이 있을 경우 정상데이터로 취급한다\n",
    "str1 = \"        stu     dent    \"\n",
    "print(str1.strip()) #가운데에 있는 공백은 삭제되지 않는다. 정상문자라고 인식하기 때문에"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "id": "c1a47829-9d57-4d4d-ae4c-a349eb85a283",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pithon\n",
      "python\n",
      "Your leg is too short\n"
     ]
    }
   ],
   "source": [
    "#문자열 대체하기\n",
    "str1 = \"pithon\"\n",
    "#str1[1] = 'y' 이렇게 되지 않음\n",
    "str2 = str1.replace('i','y')\n",
    "print(str1)\n",
    "print(str2) #출력되는 값을 변경해서 바꿔서 출력하는것이지, 원데이터가 변환되는 것은 아니다\n",
    "\n",
    "str1 = \"Life is too short\" \n",
    "str2 = str1.replace(\"Life\",\"Your leg\")\n",
    "print(str2) #바뀐 결과를 가져오는 것일뿐 원데이터는 그대로 유지"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "id": "4d73c43f-68c1-4dd2-9fc0-8c222daa8802",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Life is too short\n",
      "['Life', 'is', 'too', 'short']\n",
      "['Life', 'is', 'too', 'short']\n"
     ]
    }
   ],
   "source": [
    "#쪼개기 : split : 결과는 리스트기 된다.\n",
    "print(str1)\n",
    "l = str1.split()\n",
    "print(l)\n",
    "str2 = \"Life:is:too:short\"\n",
    "l = str2.split(\":\")\n",
    "print(l) #['Life', 'is', 'too', 'short'] 리스트로 표현하기"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
